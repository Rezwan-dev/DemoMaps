package com.heavygari.heavygaricustomer.controllers;import android.content.Context;import android.content.Intent;import android.content.res.Configuration;import android.content.res.Resources;import android.os.Build;import android.os.Bundle;import android.support.annotation.RequiresApi;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.view.animation.Animation;import android.view.animation.AnimationSet;import android.view.animation.DecelerateInterpolator;import android.view.animation.RotateAnimation;import android.view.animation.ScaleAnimation;import android.widget.ImageView;import android.widget.RelativeLayout;import com.heavygari.heavygaricustomer.R;import com.heavygari.heavygaricustomer.base.utils.SharedPreference;import java.util.Locale;/** * Created by user on 14-Dec-17. */public class ActivitySplash extends AppCompatActivity {    Context mContext;    RelativeLayout iconRelativeLayout, circleRelativeLayout;    @RequiresApi(api = Build.VERSION_CODES.CUPCAKE)    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        mContext = this;        setContentView(R.layout.activity_splash);        iconRelativeLayout = findViewById(R.id.icon_layout);        circleRelativeLayout = findViewById(R.id.circle_layout);        final ImageView view = findViewById(R.id.view);        final ScaleAnimation fade_in = new ScaleAnimation(1f, 5f, 1f, 5f                , Animation.RELATIVE_TO_SELF                , 0.5f                , Animation.RELATIVE_TO_SELF                , 0.5f        );        fade_in.setDuration(300);     // animation duration in milliseconds        fade_in.setFillAfter(true);        final ImageView imageView = findViewById(R.id.iv_splash);        AnimationSet animSet = new AnimationSet(true);        animSet.setInterpolator(new DecelerateInterpolator());        animSet.setFillAfter(true);        animSet.setFillEnabled(true);        final RotateAnimation animRotate =                new RotateAnimation(0.0f, -40.0f,                        RotateAnimation.RELATIVE_TO_SELF, 0.5f,                        RotateAnimation.RELATIVE_TO_SELF, 0.5f);        animRotate.setDuration(500);        animRotate.setStartOffset(200);        animRotate.setFillAfter(true);        animSet.addAnimation(animRotate);        imageView.startAnimation(animSet);        final AnimationSet animSet0 = new AnimationSet(true);        animSet0.setInterpolator(new DecelerateInterpolator());        animSet0.setFillAfter(true);        animSet0.setFillEnabled(true);        final RotateAnimation animRotate0 =                new RotateAnimation(-40.0f, 40.0f,                        RotateAnimation.RELATIVE_TO_SELF, 0.5f,                        RotateAnimation.RELATIVE_TO_SELF, 0.5f);        animRotate0.setDuration(500);        animRotate0.setFillAfter(true);        animSet0.addAnimation(animRotate0);        // imageView.startAnimation(animSet0);        final AnimationSet animSet1 = new AnimationSet(true);        animSet1.setInterpolator(new DecelerateInterpolator());        animSet1.setFillAfter(true);        animSet1.setFillEnabled(true);        final RotateAnimation animRotate1 =                new RotateAnimation(40.0f, 0.0f,                        RotateAnimation.RELATIVE_TO_SELF, 0.5f,                        RotateAnimation.RELATIVE_TO_SELF, 0.5f);        animRotate1.setDuration(500);        animRotate1.setFillAfter(true);        animSet1.addAnimation(animRotate1);        animRotate.setAnimationListener(new Animation.AnimationListener() {            @Override            public void onAnimationStart(Animation animation) {            }            @Override            public void onAnimationEnd(Animation animation) {                // animation.cancel();                imageView.startAnimation(animSet0);            }            @Override            public void onAnimationRepeat(Animation animation) {            }        });        animRotate0.setAnimationListener(new Animation.AnimationListener() {            @Override            public void onAnimationStart(Animation animation) {            }            @Override            public void onAnimationEnd(Animation animation) {                //animation.cancel();                imageView.startAnimation(animSet1);            }            @Override            public void onAnimationRepeat(Animation animation) {            }        });        animRotate1.setAnimationListener(new Animation.AnimationListener() {            @Override            public void onAnimationStart(Animation animation) {            }            @Override            public void onAnimationEnd(Animation animation) {                iconRelativeLayout.setVisibility(View.GONE);                circleRelativeLayout.setVisibility(View.VISIBLE);                view.startAnimation(fade_in);            }            @Override            public void onAnimationRepeat(Animation animation) {            }        });        fade_in.setAnimationListener(new Animation.AnimationListener() {            @Override            public void onAnimationStart(Animation animation) {            }            @RequiresApi(api = Build.VERSION_CODES.GINGERBREAD)            @Override            public void onAnimationEnd(Animation animation) {                if (SharedPreference.getBooleanValue(mContext, SharedPreference.LOG_IN_STATUS)) {                    Intent i = new Intent(mContext, MainActivity.class);                   /* String language = SharedPreference.getStringValue(mContext, SharedPreference.LANGUAGE);                    if(!language.isEmpty()){                        changeLanguage(language);                    }*/                    startActivity(i);                    finish();                } else {                    Intent i = new Intent(mContext, ActivityHome.class);                    startActivity(i);                    finish();                }                // If fillAfter is true, the transformation that this animation performed will persist when it is finished.            }            @Override            public void onAnimationRepeat(Animation animation) {            }        });    }    public void changeLanguage(String language) {        Locale locale = new Locale(language);        Locale.setDefault(locale);        Resources res = getResources();        Configuration config = new Configuration(res.getConfiguration());        config.locale = locale;        res.updateConfiguration(config, res.getDisplayMetrics());    }}